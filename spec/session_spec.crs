require "spec"
require "../src/poietic-generator-api"

describe PoieticGenerator::Session do
  it "initializes with correct default values" do
    session = PoieticGenerator::Session.new
    session.users.should be_empty
    session.zoom_level.should eq 0
  end

  it "adds a user and updates zoom level" do
    session = PoieticGenerator::Session.new
    socket = HTTP::WebSocket.new(IO::Memory.new)
    user_id = session.add_user(socket)
    session.users.size.should eq 1
    session.zoom_level.should eq 0
  end

  it "removes a user and updates zoom level" do
    session = PoieticGenerator::Session.new
    socket = HTTP::WebSocket.new(IO::Memory.new)
    user_id = session.add_user(socket)
    session.remove_user(user_id)
    session.users.should be_empty
    session.zoom_level.should eq 0
  end

  it "calculates correct user positions based on zoom level" do
    session = PoieticGenerator::Session.new
    
    # First user
    pos = session.get_user_position(0)
    pos.should eq({0, 0})

    # Simulate adding more users to increase zoom level
    8.times { session.add_user(HTTP::WebSocket.new(IO::Memory.new)) }
    
    # 9th user (should trigger zoom level 1)
    pos = session.get_user_position(8)
    pos.should eq({2, 2})  # Bottom-right of 3x3 grid
  end

  it "updates zoom level correctly as users join and leave" do
    session = PoieticGenerator::Session.new
    
    9.times { session.add_user(HTTP::WebSocket.new(IO::Memory.new)) }
    session.zoom_level.should eq 1

    16.times { session.add_user(HTTP::WebSocket.new(IO::Memory.new)) }
    session.zoom_level.should eq 2

    5.times { session.remove_user(session.users.keys.first) }
    session.zoom_level.should eq 1
  end
end
